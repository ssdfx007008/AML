library(datasets)
library(tibble)
library(munsell)
library(klaR)
library(caret)
library(glmnet)
setwd("E:/Documents/Git/AML/hw4/7-11")
abalone <- read.csv(file="abalone.data", header = TRUE)
part_a.lm = lm(Rings ~ Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_a.res = resid(part_a.lm)
plot(abalone$Rings, part_a.res, ylab="Residuals", xlab="Rings", main="A) Residuals Predicting Rings w/o Gender")
abline(0, 0)
# abalone <- lapply(abalone, function(x) {gsub("M", 1, x)}) These mess with the data set type and wreak havoc on lm, so i'm just preprocessing the data now
# abalone <- lapply(abalone, function(x) {gsub("F", -1, x)})
# abalone <- lapply(abalone, function(x) {gsub("I", 0, x)})
part_b.lm = lm(Rings ~ Sex+Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_b.res = resid(part_b.lm)
plot(abalone$Rings, part_b.res, ylab="Residuals", xlab="Rings", main="B) Residuals Predicting Rings w/ Gender")
abline(0, 0)
part_c.lm = lm(log(Rings) ~ Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_c.res = resid(part_c.lm)
plot(abalone$Rings, part_c.res, ylab="Residuals", xlab="Rings", main="C) Residuals Predicting log(Rings) w/o Gender")
abline(0, 0)
part_d.lm = lm(log(Rings) ~ Sex + Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_d.res = resid(part_d.lm)
plot(abalone$Rings, part_d.res, ylab="Residuals", xlab="Rings", main="D) Residuals Predicting log(Rings) w/ Gender")
abline(0, 0)
trainingSet = createDataPartition(y=abalone$Rings, p=.8, list=FALSE)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix( log(abalone[trainingSet, -c(1,9), ]) )#no sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(1,9), ] )#no sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(9), ] )#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=.1,family="gaussian")
plot(part_f.cv)
library(datasets)
library(tibble)
library(munsell)
library(klaR)
library(caret)
library(glmnet)
setwd("E:/Documents/Git/AML/hw4/7-11")
abalone <- read.csv(file="abalone.data", header = TRUE)
part_a.lm = lm(Rings ~ Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_a.res = resid(part_a.lm)
plot(abalone$Rings, part_a.res, ylab="Residuals", xlab="Rings", main="A) Residuals Predicting Rings w/o Gender")
abline(0, 0)
# abalone <- lapply(abalone, function(x) {gsub("M", 1, x)}) These mess with the data set type and wreak havoc on lm, so i'm just preprocessing the data now
# abalone <- lapply(abalone, function(x) {gsub("F", -1, x)})
# abalone <- lapply(abalone, function(x) {gsub("I", 0, x)})
part_b.lm = lm(Rings ~ Sex+Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_b.res = resid(part_b.lm)
plot(abalone$Rings, part_b.res, ylab="Residuals", xlab="Rings", main="B) Residuals Predicting Rings w/ Gender")
abline(0, 0)
part_c.lm = lm(log(Rings) ~ Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_c.res = resid(part_c.lm)
plot(abalone$Rings, part_c.res, ylab="Residuals", xlab="Rings", main="C) Residuals Predicting log(Rings) w/o Gender")
abline(0, 0)
part_d.lm = lm(log(Rings) ~ Sex + Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_d.res = resid(part_d.lm)
plot(abalone$Rings, part_d.res, ylab="Residuals", xlab="Rings", main="D) Residuals Predicting log(Rings) w/ Gender")
abline(0, 0)
trainingSet = createDataPartition(y=abalone$Rings, p=.8, list=FALSE)
#F_a
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=.1,family="gaussian")
plot(part_f.cv)
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = .1, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=.1,family="gaussian")
plot(part_f.cv)
plot(part_f.cv, main = "Regularizer Predicting Rings w/o Gender"")
#F_b
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
#F_c
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(1,9), ] )#no sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
#F_d
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(9), ] )#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot(part_f.cv, main = "Regularizer Predicting Rings w/o Gender")
plot(part_f.cv)
install.packages("plotmo")
library(plotmo)
library(klaR)
library(caret)
library(glmnet)
library(plotmo)
plotres(part_f.cv)
plotres(part_f.cv$lambda.min)
plotres(partf.model(lambda = part_f.cv$lambda.min))
plotres(part_f.model(lambda = part_f.cv$lambda.min))
plotres(coef(cvfit, s = part_f.cv$lambda.min))
plotres(coef(part_f.cv, s = part_f.cv$lambda.min))
predict(part_f.cv, newx = XTest, s = cv.glmnet$lambda.min)
predict(part_f.cv, newx = XTest, s = cv.glmnet$lambda.min)
predict(part_f.cv, newx = XTest, s = "lambda.min")
YTest = as.as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
predict(part_f.cv, newx = XTest, s = "lambda.min")
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
predict(part_f.cv, newx = XTest, s = "lambda.min")
plot(resid(predict(part_f.cv, newx = XTest, s = "lambda.min"))
#F_b
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
#F_c
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(1,9), ] )#no sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
#F_d
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(9), ] )#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot(resid(predict(part_f.cv, newx = XTest, s = "lambda.min")))
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.as.matrix(abalone[-trainingSet, 9])
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
resid(predict(part_f.cv, newx = XTest, s = "lambda.min"))
predict(part_f.cv, newx = XTest, s = "lambda.min")
predict(part_f.cv, newx = XTest, s = "lambda.min") - YTest
(predict(part_f.cv, newx = XTest, newy = YTest, s = "lambda.min")=
#F_b
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
#F_c
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(1,9), ] )#no sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
#F_d
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(9), ] )#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
(predict(part_f.cv, newx = XTest, newy = YTest, s = "lambda.min")
#F_b
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
#F_c
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(1,9), ] )#no sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
#F_d
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(9), ] )#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
predict(part_f.cv, newx = XTest, newy = YTest, s = "lambda.min")
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
predict(part_f.cv, newx = XTest, newy = YTest, s = "lambda.min")
alone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plotres( predict(p
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
trainingSet = createDataPartition(y=abalone$Rings, p=.8, list=FALSE)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plotres( predict(part_f.cv, newx = XTest, newy = YTest, s = "lambda.min") )
plot( Ytest, predict(part_f.cv, newx = XTest, newy = YTest, s = "lambda.min") )
plot( YTest, predict(part_f.cv, newx = XTest, newy = YTest, s = "lambda.min") )
plot( YTest, predict(part_f.cv, newx = XTest, s = "lambda.min") )
abline(0, 0)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot( YTest, predict(part_f.cv, newx = XTest, s = "lambda.min") )
abline(0, 0)
trainingSet = createDataPartition(y=abalone$Rings, p=.8, list=FALSE)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot( YTest, predict(part_f.cv, newx = XTest, s = "lambda.min") )
abline(0, 0)
plot( YTest, predict(part_f.cv, newx = XTest, aaa = 5, s = "lambda.min") )
predictions = predict(part_f.cv, newx = XTest,  s = "lambda.min")
View(predictions)
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - Ytest)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = Rings, main = "F-a)Regularizer predicting Rings at minimum Lambda w/o Sex")
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-a)Regularizer predicting Rings at minimum Lambda w/o Sex")
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-a)Regularizer predicting Rings at\n minimum Lambda w/o Sex")
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-a) Regularizer predicting Rings at\n minimum Lambda w/o Sex")
abline(0, 0)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-a) Regularizer predicting Rings at\n minimum Lambda w/ Sex")
abline(0, 0)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-b) Regularizer predicting Rings at\n minimum Lambda w/ Sex")
abline(0, 0)
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(1,9), ] )#no sex
YTest = as.matrix(log(abalone[-trainingSet, 9]))
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-b) Regularizer predicting log(Rings) at\n minimum Lambda w/o Sex")
abline(0, 0)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-c) Regularizer predicting log(Rings) at\n minimum Lambda w/o Sex")
abline(0, 0)
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(9), ] )#with sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-d) Regularizer predicting log(Rings) at\n minimum Lambda w/ Sex")
abline(0, 0)
plot(part_f.cv)
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(9), ] )#with sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-d) Regularizer predicting log(Rings) at\n minimum Lambda w/ Sex")
abline(0, 0)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-c) Regularizer predicting log(Rings) at\n minimum Lambda w/o Sex")
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-c) Regularizer predicting log(Rings) at\n minimum Lambda w/o Sex")
abline(0, 0)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-b) Regularizer predicting Rings at\n minimum Lambda w/ Sex")
abline(0, 0)
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(1,9), ] )#no sex
YTest = as.matrix(log(abalone[-trainingSet, 9]))
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-c) Regularizer predicting log(Rings) at\n minimum Lambda w/o Sex")
abline(0, 0)
YTrain = as.matrix(log(abalone[trainingSet, 9]))
XTrain = as.matrix( abalone[trainingSet, -c(9), ] )#with sex
YTest = as.matrix(log(abalone[-trainingSet, 9]))
XTest = as.matrix(abalone[-trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-d) Regularizer predicting log(Rings) at\n minimum Lambda w/ Sex")
abline(0, 0)
plot(data$Sex, data$Rings)
plot(as.matrix(data$Rings), as.matrix(data$Sex))
plot(as.matrix(abalone$Rings), as.matrix(abalone$Sex))
abalone <- read.csv(file="abalone_ver2.data", header = TRUE)
part_a.lm = lm(Rings ~ Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_a.res = resid(part_a.lm)
plot(as.matrix(abalone$Rings), as.matrix(abalone$Sex))
plot(abalone$Rings, part_a.res, ylab="Residuals", xlab="Rings", main="A) Residuals Predicting Rings w/o Gender")
setwd("E:/Documents/Git/AML/hw4/7-11")
abalone <- read.csv(file="abalone_ver2.data", header = TRUE)
plot(as.matrix(abalone$Rings), as.matrix(abalone$Sex))
part_a.lm = lm(Rings ~ Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_a.res = resid(part_a.lm)
plot(abalone$Rings, part_a.res, ylab="Residuals", xlab="Rings", main="A) Residuals Predicting Rings w/o Gender")
abline(0, 0)
part_b.lm = lm(Rings ~ Sex+Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_b.res = resid(part_b.lm)
plot(abalone$Rings, part_b.res, ylab="Residuals", xlab="Rings", main="B) Residuals Predicting Rings w/ Gender")
abline(0, 0)
part_c.lm = lm(log(Rings) ~ Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_c.res = resid(part_c.lm)
plot(abalone$Rings, part_c.res, ylab="Residuals", xlab="Rings", main="C) Residuals Predicting log(Rings) w/o Gender")
abline(0, 0)
part_d.lm = lm(log(Rings) ~ Sex + Length+Diameter+Height+Whole_weight+Shucked_weight+Viscera_weight+Shell_weight, data = abalone)
part_d.res = resid(part_d.lm)
plot(abalone$Rings, part_d.res, ylab="Residuals", xlab="Rings", main="D) Residuals Predicting log(Rings) w/ Gender")
abline(0, 0)
plot(as.matrix(abalone$Rings), as.matrix(abalone$Sex))
abalone <- read.csv(file="abalone.data", header = TRUE)
plot(as.matrix(abalone$Rings), as.matrix(abalone$Sex))
abalone <- read.csv(file="abalone_ver2.data", header = TRUE)
trainingSet = createDataPartition(y=abalone$Rings, p=.8, list=FALSE)
YTrain = as.matrix(abalone[trainingSet, 9])
library(datasets)
library(tibble)
library(munsell)
library(klaR)
library(caret)
library(glmnet)
library(plotmo)
setwd("E:/Documents/Git/AML/hw4/7-11")
abalone <- read.csv(file="abalone_ver2.data", header = TRUE)
trainingSet = createDataPartition(y=abalone$Rings, p=.8, list=FALSE)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(1,9), ])#no sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(1,9), ])
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-a) Regularizer predicting Rings at\n minimum Lambda w/o Sex")
abline(0, 0)
YTrain = as.matrix(abalone[trainingSet, 9])
XTrain = as.matrix(abalone[trainingSet, -c(9), ])#with sex
YTest = as.matrix(abalone[-trainingSet, 9])
XTest = as.matrix(abalone[-trainingSet, -c(9), ])#with sex
part_f.model = glmnet(x=XTrain, y=YTrain, alpha = 1.0, family = "gaussian")
part_f.cv = cv.glmnet(x=XTrain, y=YTrain, type.measure="mse", alpha=1.0,family="gaussian")
plot(part_f.cv)
plot( YTest, predict(part_f.cv, newx = XTest,  s = "lambda.min") - YTest, ylab = "Residuals", xlab = "Rings", main = "F-b) Regularizer predicting Rings at\n minimum Lambda w/ Sex")
abline(0, 0)
